request('http://fromrussiawithlove.com/baby.mp3').pipe(fs.createWriteStream('song.mp3'))

https://www.npmjs.com/package/scramjet

request('http://www.google.com', function (error, response, body) {
  console.log('error:', error); // Print the error if one occurred
  console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received
  console.log('body:', body); // Print the HTML for the Google homepage.
});

var buffer = new Buffer( 'foo' );
var bufferStream = new stream.PassThrough();
bufferStream.end( buffer );
bufferStream.pipe( process.stdout );

"date":"Dec 31, 1969" 

2016-06-23

const monthNames = ["January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
];

const d = new Date();
document.write("The current month is " + monthNames[d.getMonth()]);

{
"book_id":"113636810",
"title":"The God Delusion",
"author_lf":"Dawkins, Richard",
"author_fl":"Richard Dawkins",
"author_code":"dawkinsrichard",
"ISBN":"0618918248",
"ISBN_cleaned":"0618918248",
"publicationdate":"2008",
"entry_stamp":"1414613150",
"entry_date":"Oct 29, 2014",
"copies":"1","rating":0,
"language_main":"eng",
"language_secondary":"",
"language_original":"",
"hasreview":"0",
"dateacquired_stamp":"0",
"dateacquired_date":"Dec 31, 1969",
"cover":"http:\/\/ecx.images-amazon.com\/images\/P\/0618918248.01._SCLZZZZZZZ_.jpg"},


//first table
- author_id
- author

CREATE TABLE authors
(
    author_id serial primary key,
    name text not null,
    last_name text not null,
    enabled boolean DEFAULT TRUE
);


//second_table
- book_id
- title
- image
- description_ISBN
- date


CREATE TABLE books
(
    book_id serial primary key,
    title text not null,
    description int not null,
    author CHAR(255) primary key not null,
    author_id int not null,
    PRIMARY KEY (id)

);

ALTER TABLE books ADD FOREIGN KEY (author_id) REFERENCES authors (author_id);

//third_table
- shop_id
- enable
- qqty

CREATE TABLE shop
(
    shop_id serial primary key,
    book_id int not null, 							//extra
    enabled boolean DEFAULT FALSE,			//extra
    rating int not null,  							//extra
    qqty int float constraint qqty_check check(qqty > -1)  //extra
);


  id serial,
  username CHAR(25) NOT NULL,
  enabled boolean DEFAULT TRUE,
  PRIMARY KEY (id)


  =======================================================================
// one to one

CREATE TABLE shops (
  id serial,
  shopname VARCHAR(25) NOT NULL,
  enabled boolean DEFAULT FALSE, 
  PRIMARY KEY (id)
);

/*
 one to one: Shop has one address
*/

CREATE TABLE addresses (
  shop_id int NOT NULL,
  street VARCHAR(30) NOT NULL,
  city VARCHAR(30) NOT NULL,
  state VARCHAR(30) NOT NULL,
  PRIMARY KEY (shop_id),
  CONSTRAINT fk_shop_id FOREIGN KEY (shop_id) REFERENCES shops (id)
);

// one to many
CREATE TABLE books (
  id serial,
  title VARCHAR(100) NOT NULL,
  date VARCHAR(100) NOT NULL,
  author VARCHAR(100) NOT NULL,
	description VARCHAR(255) NOT NULL,
  ISBN int,
  image VARCHAR(100) NOT NULL,
  PRIMARY KEY (id),
  UNIQUE (ISBN)
);

[ { title: 'The development of Greek biography; four lectures',
    date: '2005-08-21',
    autor: 'Momigliano, Arnaldo',
    description: '0674200411',
    image:
     'http://ecx.images-amazon.com/images/P/0674200411.01._SCLZZZZZZZ_.jpg' } ]


DROP TABLE IF EXISTS reviews;
CREATE TABLE reviews (
  id serial,
  book_id int NOT NULL,
  shop_id int NOT NULL,
  review_content VARCHAR(255),
  rating int,
  published_date timestamp DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE,
  FOREIGN KEY (shop_id) REFERENCES shops(id) ON DELETE CASCADE
);

CREATE TABLE shops_books (
  shop_id int NOT NULL,
  book_id int NOT NULL,
  checkout_date timestamp,
  PRIMARY KEY (shop_id, book_id),
  FOREIGN KEY (shop_id) REFERENCES books(id) ON UPDATE CASCADE,
  FOREIGN KEY (book_id) REFERENCES books(id) ON UPDATE CASCADE
);






      //make this.objBody with params we need 
      let tempObj = {};
      for (let i in bdJsonParams) {

        // transform data to postgreSQL standart: from "date":"Dec 31, 1969"  to 2016-06-23
        if (i == 1) {
          let dateArray = this.objBody[inputJsonParams[i]].split(' ');
          dateArray[1].split(', ');
          dateArray = dateArray.map( item => {
            item.trim();
            // check month
            if( !parseInt(item)) { 
              item = monthNames[item];
              
              if(item < 10) {
                item = '0'+ item;
              };

              return item;
            }
            // check days , years
            item = parseInt(item);

            if(item < 10) {
              item = '0'+ item;
            }
            
            return item;
          });

          let formattedDateArray = [];
          formattedDateArray.push(dateArray[2]);
          formattedDateArray.push(dateArray[0]);
          formattedDateArray.push(dateArray[1]);

          this.objBody[inputJsonParams[i]] = formattedDateArray.join('-');
        }

        tempObj[bdJsonParams[i]] = this.objBody[inputJsonParams[i]];
      };

      this.objBody = tempObj;
      tempObj = '';

      this.objBody = JSON.stringify(this.objBody);
      
      if (!this.starter) {

        this.objBody = '[' + this.objBody + ',';
        this.starter = 1;
      } else { 

        this.objBody = this.objBody + ',';
      };
    };

 // on end of json add ']'
    if (~str.indexOf('\n' || 'r\n') ) { 
        this.objBody +=  ']';
        this.buffer = '';
      };